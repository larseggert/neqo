name: QUIC Network Simulator

on:
  schedule:
    - cron: '42 3 * * 2,5' # Runs at 03:42 UTC (m and h chosen arbitrarily) twice a week.
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  LATEST: neqo-latest
  DELIM: ' vs. '

jobs:
  docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    outputs:
      imageID: ${{ steps.docker_build_and_push.outputs.imageID }}
    permissions:
      packages: write
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-qns
          tags: |
            # default
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          file: qns/Dockerfile
          build-args: RUST_VERSION=stable
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: 'linux/amd64, linux/arm64'

      - name: Build
        if: github.event_name == 'pull_request'
        id: docker_build_and_push
        uses: docker/build-push-action@v5
        with:
          tags: ${{ steps.meta.outputs.tags }}
          file: qns/Dockerfile
          build-args: RUST_VERSION=stable
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: 'linux/amd64'
          outputs: type=docker,dest=/tmp/${{ env.LATEST }}.tar

      - name: Upload artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.LATEST }}
          path: /tmp/${{ env.LATEST }}.tar

  implementations:
    if: ${{ github.event_name == 'pull_request' }}
    name: Determine interop pairs
    needs: docker-image
    runs-on: ubuntu-latest
    outputs:
      pairs: ${{ steps.config.outputs.pairs }}
      implementations: ${{ steps.config.outputs.implementations }}
    env:
      URL: https://github.com/mozilla/neqo
      ROLE: both
    steps:
      - id: config
        run: |
          # Add neqo-latest to implementations.json
          curl https://raw.githubusercontent.com/quic-interop/quic-interop-runner/master/implementations.json | \
            jq --arg key "$LATEST" --argjson newEntry '
              {
                "image": "${{ needs.docker-image.outputs.imageID }}",
                "url": "${{ env.URL }}",
                "role": "${{ env.ROLE }}"
              }' '.[$key] = $newEntry' > implementations.json
          {
            echo "implementations<<EOF"
            cat implementations.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          # Determine valid interop pairs that contain $LATEST
          jq < implementations.json "[
              [to_entries[] | select(.value.role==\"server\" or .value.role==\"both\").key] as \$servers |
              [to_entries[] | select(.value.role==\"client\" or .value.role==\"both\").key] as \$clients |
              \$clients[] as \$client |
              \$servers[] as \$server |
              \$client + \"$DELIM\" + \$server |
              select(contains(\"$LATEST\"))
            ]" > pairs.json
          {
            echo "pairs<<EOF"
            cat pairs.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  run-qns:
    if: ${{ github.event_name == 'pull_request' }}
    name: Run QNS
    needs: implementations
    strategy:
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.implementations.outputs.pairs) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.LATEST }}
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/${{ env.LATEST }}.tar
          docker image ls -a

      - name: Extract client and server from interop pair
        id: depair
        run: |
          PAIR=$(echo ${{ matrix.pair }} | sed "s/$DELIM/%/g")
          echo "client=$(echo "$PAIR" | cut -d% -f1)" >> "$GITHUB_OUTPUT"
          echo "server=$(echo "$PAIR" | cut -d% -f2)" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4

      - name: Interop ${{ steps.depair.outputs.client }} ${{ env.DELIM }} ${{ steps.depair.outputs.server }}
        # TODO: Replace once https://github.com/quic-interop/quic-interop-runner/pull/356 is merged.
        uses: ./.github/actions/quic-interop-runner
        with:
          client: ${{ steps.depair.outputs.client }}
          server: ${{ steps.depair.outputs.server }}
          implementations: ${{ needs.implementations.outputs.implementations }}
          test: 'handshake,amplificationlimit,ecn,transfer,versionnegotiation,zero_rtt'

  report:
    if: ${{ always() && github.event_name == 'pull_request' }}
    name: Report the results
    needs: [implementations, run-qns]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: results

      - name: Consolidate results
        run: |
          ls -lt results
          for run in results/*; do
            pushd "$run"
            CLIENT=$(jq < result.json '.clients[0]')
            SERVER=$(jq < result.json '.servers[0]')
            jq < result.json '[.results[] | group_by(.result)[] | {(.[0].result): [.[] | .abbr]}] | add' > grouped.json
            for group in $(jq < grouped.js 'keys[]'); do
              RESULT=$(jq < result.json ".results[] | select(.result==\"$result\") | .abbr")
              echo "## $CLIENT$DELIM$SERVER" >> "../$RESULT.md"
              jq < grouped.json '.'"$group"'[]' >> "../$RESULT.md"
            done
            popd
          done
          ls -lt
          cat ./*.md
